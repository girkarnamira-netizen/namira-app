import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# --- Language Strings (Includes all multilingual text) ---
text_strings = {
    "en": {
        "page_title": "InternMate", "header_title": "InternMate ЁЯТ╝",
        "header_tagline": "Find your next big opportunity with InternMateтАФa personalized search experience.",
        "sidebar_title": "ЁЯФН Search and Filter", "sidebar_tagline": "Use the filters below to get personalized recommendations.",
        "select_language": "ЁЯМР Select Language", "select_location": "ЁЯУН Preferred Location",
        "work_mode": "ЁЯТ╗ Select Work Mode", "online": "Online", "offline": "Offline", "any": "Any",
        "enter_skills": "тЬПя╕П Enter your skills (e.g., Python, AI, Web Development)",
        "min_stipend": "ЁЯТ░ Minimum stipend (тВ╣)", "show_recommendations": "тЬи Show Recommendations",
        "recommendations_title": "ЁЯОп Your Internship Recommendations", "stipend_label": "Stipend",
        "upload_cv": "ЁЯУД Upload CV/Resume (PDF or TXT)",
        "no_results": "ЁЯШФ No internships found matching your criteria. Try broadening your search!", "help_title": "ЁЯУЪ Help and Support Centre",
        "faq_1_q": "How does the recommendation engine work?", "faq_1_a": "Our recommendation engine uses a combination of natural language processing (NLP) and machine learning algorithms. It uses **Cosine Similarity** to find the most relevant matches based on your skills.",
        "faq_2_q": "How do I filter for internships?", "faq_2_a": "You can use the sidebar to filter internships by **Work Mode**, **Location**, **Skills**, and **Minimum Stipend**.",
        "faq_3_q": "Can I upload my resume for personalized recommendations?", "faq_3_a": "Yes, you can now upload your resume (PDF or TXT) directly in the sidebar. While the system currently uses manual skill entry for matching, this upload feature is in place for future integration with automated CV parsing.",
        "faq_4_q": "What is the difference between 'Online' and 'Offline' work modes?", "faq_4_a": "Selecting **'Online'** shows Remote internships. **'Offline'** shows On-site or Hybrid internships.",
        "faq_5_q": "How is the stipend calculated?", "faq_5_a": "The stipend displayed for each internship is a fixed amount specified in the dataset. The **'Minimum stipend'** slider filters for internships that meet or exceed this amount.",
        "footer": "InternMate - Made by Girkar Namira Siddique"
    },
    "hi": {
        "page_title": "рдЗрдВрдЯрд░рдирдореИрдЯ", "header_title": "рдЗрдВрдЯрд░рдирдореИрдЯ ЁЯТ╝",
        "header_tagline": "рдЗрдВрдЯрд░рдирдореИрдЯ рдХреЗ рд╕рд╛рде рдЕрдкрдирд╛ рдЕрдЧрд▓рд╛ рдмрдбрд╝рд╛ рдЕрд╡рд╕рд░ рдЦреЛрдЬреЗрдВтАФрдПрдХ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЦреЛрдЬ рдЕрдиреБрднрд╡ред",
        "sidebar_title": "ЁЯФН рдЦреЛрдЬреЗрдВ рдФрд░ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реЗрдВ", "sidebar_tagline": "рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд┐рдлрд╛рд░рд┐рд╢реЛрдВ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "select_language": "ЁЯМР рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", "select_location": "ЁЯУН рдкрд╕рдВрджреАрджрд╛ рд╕реНрдерд╛рди",
        "work_mode": "ЁЯТ╗ рдХрд╛рд░реНрдп рдореЛрдб рдЪреБрдиреЗрдВ", "online": "рдСрдирд▓рд╛рдЗрди", "offline": "рдСрдлрд╝рд▓рд╛рдЗрди", "any": "рдХреЛрдИ рднреА",
        "enter_skills": "тЬПя╕П рдЕрдкрдиреЗ рдХреМрд╢рд▓ рджрд░реНрдЬ рдХрд░реЗрдВ (рдЙрджрд╛. Python, AI, Web Development)",
        "min_stipend": "ЁЯТ░ рдиреНрдпреВрдирддрдо рд╡рдЬреАрдлрд╛ (тВ╣)", "show_recommendations": "тЬи рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рджрд┐рдЦрд╛рдПрдВ",
        "recommendations_title": "ЁЯОп рдЖрдкрдХреА рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ", "stipend_label": "рд╡рдЬреАрдлрд╛",
        "upload_cv": "ЁЯУД рдмрд╛рдпреЛрдбрд╛рдЯрд╛ / рд░рд┐рдЬреНрдпреВрдореЗ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (PDF рдпрд╛ TXT)",
        "no_results": "ЁЯШФ рдЖрдкрдХреЗ рдорд╛рдирджрдВрдбреЛрдВ рд╕реЗ рдореЗрд▓ рдЦрд╛рдиреЗ рд╡рд╛рд▓реА рдХреЛрдИ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдирд╣реАрдВ рдорд┐рд▓реАред рдЕрдкрдиреА рдЦреЛрдЬ рдХрд╛ рд╡рд┐рд╕реНрддрд╛рд░ рдХрд░реЗрдВ!", "help_title": "ЁЯУЪ рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рд╕рдорд░реНрдерди рдХреЗрдВрджреНрд░",
        "faq_1_q": "рд╕рд┐рдлрд╛рд░рд┐рд╢ рдЗрдВрдЬрди рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ?", "faq_1_a": "рд╣рдорд╛рд░рд╛ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдЗрдВрдЬрди рдкреНрд░рд╛рдХреГрддрд┐рдХ рднрд╛рд╖рд╛ рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг (NLP) рдФрд░ рдорд╢реАрди рд▓рд░реНрдирд┐рдВрдЧ рдПрд▓реНрдЧреЛрд░рд┐рджрдо рдХреЗ рд╕рдВрдпреЛрдЬрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИред рдпрд╣ рд╕рдмрд╕реЗ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдорд┐рд▓рд╛рди рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП **Cosine Similarity** рдирд╛рдордХ рддрдХрдиреАрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИред",
        "faq_2_q": "рдореИрдВ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдХреИрд╕реЗ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реВрдБ?", "faq_2_a": "рдЖрдк **рдХрд╛рд░реНрдп рдореЛрдб**, **рд╕реНрдерд╛рди**, **рдХреМрд╢рд▓**, рдФрд░ **рдиреНрдпреВрдирддрдо рд╡рдЬреАрдлрд╛** рджреНрд╡рд╛рд░рд╛ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдХреЛ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд╛рдЗрдбрдмрд╛рд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
        "faq_3_q": "рдХреНрдпрд╛ рдореИрдВ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд┐рдлрд╛рд░рд┐рд╢реЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ рдмрд╛рдпреЛрдбрд╛рдЯрд╛ рдЕрдкрд▓реЛрдб рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?", "faq_3_a": "рд╣рд╛рдБ, рдЕрдм рдЖрдк рд╕реАрдзреЗ рд╕рд╛рдЗрдбрдмрд╛рд░ рдореЗрдВ рдЕрдкрдирд╛ рдмрд╛рдпреЛрдбрд╛рдЯрд╛ (PDF рдпрд╛ TXT) рдЕрдкрд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рд╣рд╛рд▓рд╛рдВрдХрд┐ рд╕рд┐рд╕реНрдЯрдо рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдорд┐рд▓рд╛рди рдХреЗ рд▓рд┐рдП рдореИрдиреНрдпреБрдЕрд▓ рд╕реНрдХрд┐рд▓ рдПрдВрдЯреНрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИ, рдпрд╣ рдЕрдкрд▓реЛрдб рд╕реБрд╡рд┐рдзрд╛ рднрд╡рд┐рд╖реНрдп рдореЗрдВ рдСрдЯреЛрдореЗрдЯреЗрдб CV рдкрд╛рд░реНрд╕рд┐рдВрдЧ рдХреЗ рд╕рд╛рде рдПрдХреАрдХрд░рдг рдХреЗ рд▓рд┐рдП рдореМрдЬреВрдж рд╣реИред",
        "faq_4_q": "'рдСрдирд▓рд╛рдЗрди' рдФрд░ 'рдСрдлрд╝рд▓рд╛рдЗрди' рдХрд╛рд░реНрдп рдореЛрдб рдореЗрдВ рдХреНрдпрд╛ рдЕрдВрддрд░ рд╣реИ?", "faq_4_a": "**'рдСрдирд▓рд╛рдЗрди'** рдЪреБрдирдиреЗ рдкрд░ рд░рд┐рдореЛрдЯ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд┐рдЦрд╛рдИ рджреЗрдЧреАред **'рдСрдлрд╝рд▓рд╛рдЗрди'** рдЪреБрдирдиреЗ рдкрд░ рдСрди-рд╕рд╛рдЗрдЯ рдпрд╛ рд╣рд╛рдЗрдмреНрд░рд┐рдб рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд┐рдЦрд╛рдИ рджреЗрдЧреАред",
        "faq_5_q": "рд╡рдЬреАрдлрд╛ рдХреА рдЧрдгрдирд╛ рдХреИрд╕реЗ рдХреА рдЬрд╛рддреА рд╣реИ?", "faq_5_a": "рдкреНрд░рддреНрдпреЗрдХ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдХреЗ рд▓рд┐рдП рдкреНрд░рджрд░реНрд╢рд┐рдд рд╡рдЬреАрдлрд╛ рдбреЗрдЯрд╛рд╕реЗрдЯ рдореЗрдВ рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдПрдХ рдирд┐рд╢реНрдЪрд┐рдд рд░рд╛рд╢рд┐ рд╣реИред **'рдиреНрдпреВрдирддрдо рд╡рдЬреАрдлрд╛'** рд╕реНрд▓рд╛рдЗрдбрд░ рдХреЗрд╡рд▓ рдЙрди рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдХреЛ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░рддрд╛ рд╣реИ рдЬреЛ рдЖрдкрдХреЗ рджреНрд╡рд╛рд░рд╛ рдЪреБрдиреА рдЧрдИ рд░рд╛рд╢рд┐ рдХреЗ рдмрд░рд╛рдмрд░ рдпрд╛ рдЙрд╕рд╕реЗ рдЕрдзрд┐рдХ рд╣реИрдВред",
        "footer": "InternMate - Girkar Namira Siddique рджреНрд╡рд╛рд░рд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛"
    },
    "mr": {
        "page_title": "рдЗрдВрдЯрд░рдирдореИрдЯ", "header_title": "рдЗрдВрдЯрд░рдирдореИрдЯ ЁЯТ╝",
        "header_tagline": "InternMate рд╕рд╣ рддреБрдордЪреА рдкреБрдвреАрд▓ рдореЛрдареА рд╕рдВрдзреА рд╢реЛрдзрд╛тАФрдПрдХ рд╡реИрдпрдХреНрддрд┐рдХ рд╢реЛрдз рдЕрдиреБрднрд╡.",
        "sidebar_title": "ЁЯФН рд╢реЛрдзрд╛ рдЖрдгрд┐ рдлрд┐рд▓реНрдЯрд░ рдХрд░рд╛", "sidebar_tagline": "рд╡реИрдпрдХреНрддрд┐рдХ рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА рдЦрд╛рд▓реАрд▓ рдлрд┐рд▓реНрдЯрд░ рд╡рд╛рдкрд░рд╛.",
        "select_language": "ЁЯМР рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛", "select_location": "ЁЯУН рдкрд╕рдВрддреАрдЪреЗ рд╕реНрдерд╛рди",
        "work_mode": "ЁЯТ╗ рдХрд╛рд░реНрдп рдореЛрдб рдирд┐рд╡рдбрд╛", "online": "рдСрдирд▓рд╛рдЗрди", "offline": "рдСрдлрд▓рд╛рдЗрди", "any": "рдХреЛрдгрддреЗрд╣реА",
        "enter_skills": "тЬПя╕П рддреБрдордЪреА рдХреМрд╢рд▓реНрдпреЗ рдЯрд╛рдХрд╛ (рдЙрджрд╛. Python, AI, Web Development)",
        "min_stipend": "ЁЯТ░ рдХрд┐рдорд╛рди рд╕реНрдЯрд╛рдпрдкреЗрдВрдб (тВ╣)", "show_recommendations": "тЬи рд╢рд┐рдлрд╛рд░рд╕реА рджрд╛рдЦрд╡рд╛",
        "recommendations_title": "ЁЯОп рддреБрдордЪреНрдпрд╛ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╢рд┐рдлрд╛рд░рд╕реА", "stipend_label": "рд╕реНрдЯрд╛рдпрдкреЗрдВрдб",
        "upload_cv": "ЁЯУД рдмрд╛рдпреЛрдбрд╛рдЯрд╛ / рд░рд┐рдЭреНрдпреБрдореЗ рдЕрдкрд▓реЛрдб рдХрд░рд╛ (PDF рдХрд┐рдВрд╡рд╛ TXT)",
        "no_results": "ЁЯШФ рддреБрдордЪреНрдпрд╛ рдирд┐рдХрд╖рд╛рдВрд╢реА рдЬреБрд│рдгрд╛рд░реА рдХреЛрдгрддреАрд╣реА рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕рд╛рдкрдбрд▓реА рдирд╛рд╣реАред рдХреГрдкрдпрд╛ рддреБрдордЪрд╛ рд╢реЛрдз рд╡рд┐рд╕реНрддреГрдд рдХрд░рд╛!", "help_title": "ЁЯУЪ рдорджрдд рдЖрдгрд┐ рд╕рдорд░реНрдерди рдХреЗрдВрджреНрд░",
        "faq_1_q": "рд╢рд┐рдлрд╛рд░рд╕ рдЗрдВрдЬрд┐рди рдХрд╕реЗ рдХрд╛рд░реНрдп рдХрд░рддреЗ?", "faq_1_a": "рдЖрдордЪреЗ рд╢рд┐рдлрд╛рд░рд╕ рдЗрдВрдЬрд┐рди рдиреИрд╕рд░реНрдЧрд┐рдХ рднрд╛рд╖рд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ (NLP) рдЖрдгрд┐ рдорд╢реАрди рд▓рд░реНрдирд┐рдВрдЧ рдЕрд▓реНрдЧреЛрд░рд┐рджрдордЪреЗ рд╕рдВрдпреЛрдЬрди рд╡рд╛рдкрд░рддреЗред рд╕рд░реНрд╡рд╛рдд рд╕рдВрдмрдВрдзрд┐рдд рдЬреБрд│рдгреА рд╢реЛрдзрдгреНрдпрд╛рд╕рд╛рдареА рддреЗ **Cosine Similarity** рдирд╛рд╡рд╛рдЪреЗ рддрдВрддреНрд░ рд╡рд╛рдкрд░рддреЗред",
        "faq_2_q": "рдореА рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдХрд╢реА рдлрд┐рд▓реНрдЯрд░ рдХрд░реВ?", "faq_2_a": "рддреБрдореНрд╣реА **рдХрд╛рд░реНрдп рдореЛрдб**, **рд╕реНрдерд╛рди**, **рдХреМрд╢рд▓реНрдпреЗ**, рдЖрдгрд┐ **рдХрд┐рдорд╛рди рд╕реНрдЯрд╛рдпрдкреЗрдВрдб** рдиреБрд╕рд╛рд░ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдлрд┐рд▓реНрдЯрд░ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рд╕рд╛рдЗрдбрдмрд╛рд░ рд╡рд╛рдкрд░реВ рд╢рдХрддрд╛ред",
        "faq_3_q": "рдореА рд╡реИрдпрдХреНрддрд┐рдХ рд╢рд┐рдлрд╛рд░рд╕реАрдВрд╕рд╛рдареА рдорд╛рдЭрд╛ рдмрд╛рдпреЛрдбрд╛рдЯрд╛ рдЕрдкрд▓реЛрдб рдХрд░реВ рд╢рдХрддреЛ рдХрд╛?", "faq_3_a": "рд╣реЛрдп, рдЖрддрд╛ рддреБрдореНрд╣реА рдереЗрдЯ рд╕рд╛рдЗрдбрдмрд╛рд░рдордзреНрдпреЗ рддреБрдордЪрд╛ рдмрд╛рдпреЛрдбрд╛рдЯрд╛ (PDF рдХрд┐рдВрд╡рд╛ TXT) рдЕрдкрд▓реЛрдб рдХрд░реВ рд╢рдХрддрд╛. рд╕рд┐рд╕реНрдЯреАрдо рд╕рдзреНрдпрд╛ рдЬреБрд│рдгреАрд╕рд╛рдареА рдореЕрдиреНрдпреБрдЕрд▓ рдХреМрд╢рд▓реНрдп рдПрдВрдЯреНрд░реА рд╡рд╛рдкрд░рдд рдЕрд╕рд▓реА рддрд░реА, рд╣реЗ рдЕрдкрд▓реЛрдб рд╡реИрд╢рд┐рд╖реНрдЯреНрдп рднрд╡рд┐рд╖реНрдпрд╛рдд рдСрдЯреЛрдореЗрдЯреЗрдб CV рдкрд╛рд░реНрд╕рд┐рдВрдЧрд╕рд╣ рдПрдХрддреНрд░реАрдХрд░рдгрд╛рд╕рд╛рдареА рдпреЛрдЧреНрдп рдЖрд╣реЗред",
        "faq_4_q": "'рдСрдирд▓рд╛рдЗрди' рдЖрдгрд┐ 'рдСрдлрд▓рд╛рдЗрди' рдХрд╛рд░реНрдп рдореЛрдбрдордзреНрдпреЗ рдХрд╛рдп рдлрд░рдХ рдЖрд╣реЗ?", "faq_4_a": "**'рдСрдирд▓рд╛рдЗрди'** рдирд┐рд╡рдбрд▓реНрдпрд╛рд╕ рд░рд┐рдореЛрдЯ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд┐рд╕рддреАрд▓. **'рдСрдлрд▓рд╛рдЗрди'** рдирд┐рд╡рдбрд▓реНрдпрд╛рд╕ рдСрди-рд╕рд╛рдЗрдЯ рдХрд┐рдВрд╡рд╛ рд╣рд╛рдЗрдмреНрд░рд┐рдб рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд┐рд╕рддреАрд▓ред",
        "faq_5_q": "рд╕реНрдЯрд╛рдпрдкреЗрдВрдбрдЪреА рдЧрдгрдирд╛ рдХрд╢реА рдХреЗрд▓реА рдЬрд╛рддреЗ?", "faq_5_a": "рдкреНрд░рддреНрдпреЗрдХ рдЗрдВрдЯрд░реНрдирд╢рд┐рдкрд╕рд╛рдареА рджрд░реНрд╢рд╡рд┐рд▓реЗрд▓рд╛ рд╕реНрдЯрд╛рдпрдкреЗрдВрдб рдбреЗрдЯрд╛рд╕реЗрдЯрдордзреНрдпреЗ рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдХреЗрд▓реЗрд▓реА рдПрдХ рдирд┐рд╢реНрдЪрд┐рдд рд░рдХреНрдХрдо рдЖрд╣реЗред **'рдХрд┐рдорд╛рди рд╕реНрдЯрд╛рдпрдкреЗрдВрдб'** рд╕реНрд▓рд╛рдЗрдбрд░ рддреБрдореНрд╣реА рдирд┐рд╡рдбрд▓реЗрд▓реНрдпрд╛ рд░рдХрдореЗрдЪреНрдпрд╛ рдмрд░реЛрдмрд░реАрдЪреНрдпрд╛ рдХрд┐рдВрд╡рд╛ рддреНрдпрд╛рд╣реВрди рдЕрдзрд┐рдХ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдлрд┐рд▓реНрдЯрд░ рдХрд░рддреЛред",
        "footer": "InternMate - Girkar Namira Siddique рдпрд╛рдВрдиреА рддрдпрд╛рд░ рдХреЗрд▓реЗ рдЖрд╣реЗ"
    },
    "ta": {
        "page_title": "роЗройрпНроЯро░рпНройрпНроорпЗроЯрпН", "header_title": "роЗройрпНроЯро░рпНройрпНроорпЗроЯрпН ЁЯТ╝",
        "header_tagline": "роЗройрпНроЯро░рпНройрпНроорпЗроЯрпН роЙроЯройрпН роЙроЩрпНроХро│рпН роЕроЯрпБродрпНрод рокрпЖро░ро┐роп ро╡ро╛ропрпНрокрпНрокрпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН - родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ родрпЗроЯро▓рпН роЕройрпБрокро╡роорпН.",
        "sidebar_title": "ЁЯФН родрпЗроЯрпБ рооро▒рпНро▒рпБроорпН ро╡роЯро┐роХроЯрпНроЯрпБ", "sidebar_tagline": "родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒ роХрпАро┤рпЗ роЙро│рпНро│ ро╡роЯро┐рокрпНрокро╛ройрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.",
        "select_language": "ЁЯМР роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", "select_location": "ЁЯУН ро╡ро┐ро░рпБрокрпНрокрооро╛рой роЗроЯроорпН",
        "work_mode": "ЁЯТ╗ ро╡рпЗро▓рпИ роорпБро▒рпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", "online": "роЖройрпНро▓рпИройрпН", "offline": "роЖроГрокрпНро▓рпИройрпН", "any": "роПродрпЗройрпБроорпН",
        "enter_skills": "тЬПя╕П роЙроЩрпНроХро│рпН родро┐ро▒ройрпНроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН (роО.роХро╛., Python, AI, Web Development)",
        "min_stipend": "ЁЯТ░ роХрпБро▒рпИроирпНродрокроЯрпНроЪ роЙродро╡ро┐родрпНродрпКроХрпИ (тВ╣)", "show_recommendations": "тЬи рокро░ро┐роирпНродрпБро░рпИроХро│рпИроХрпН роХро╛роЯрпНроЯрпБ",
        "recommendations_title": "ЁЯОп роЙроЩрпНроХро│рпН роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН", "stipend_label": "роЙродро╡ро┐родрпНродрпКроХрпИ",
        "upload_cv": "ЁЯУД рокропрпЛроЯрпЗроЯрпНроЯро╛ / ро░рпЖро╕рпНропрпВроорпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН (PDF роЕро▓рпНро▓родрпБ TXT)",
        "no_results": "ЁЯШФ роЙроЩрпНроХро│рпН роЕро│ро╡рпБроХрпЛро▓рпНроХро│рпБроЯройрпН рокрпКро░рпБроирпНродроХрпНроХрпВроЯро┐роп роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпНроХро│рпН роОродрпБро╡рпБроорпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ. роЙроЩрпНроХро│рпН родрпЗроЯро▓рпИ ро╡ро┐ро░ро┐ро╡ро╛роХрпНроХрпБроЩрпНроХро│рпН!", "help_title": "ЁЯУЪ роЙродро╡ро┐ рооро▒рпНро▒рпБроорпН роЖродро░ро╡рпБ роорпИропроорпН",
        "faq_1_q": "рокро░ро┐роирпНродрпБро░рпИ роЗропроирпНродро┐ро░роорпН роОро╡рпНро╡ро╛ро▒рпБ роЪрпЖропро▓рпНрокроЯрпБроХро┐ро▒родрпБ?", "faq_1_a": "роОроЩрпНроХро│рпН рокро░ро┐роирпНродрпБро░рпИ роЗропроирпНродро┐ро░роорпН роЗропро▒рпНроХрпИ роорпКро┤ро┐ роЪрпЖропро▓ро╛роХрпНроХроорпН (NLP) рооро▒рпНро▒рпБроорпН роЗропроирпНродро┐ро░ роХро▒рпНро▒ро▓рпН роЕро▓рпНроХро╛ро░ро┐родроорпНроХро│ро┐ройрпН роХро▓ро╡рпИропрпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ. роЗродрпБ рооро┐роХро╡рпБроорпН рокрпКро░рпБродрпНродрооро╛рой рокрпКро░рпБродрпНродроЩрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп **Cosine Similarity** роОройрокрпНрокроЯрпБроорпН роТро░рпБ роирпБроЯрпНрокродрпНродрпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ.",
        "faq_2_q": "роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпНроХро│рпИ роиро╛ройрпН роОрокрпНрокроЯро┐ ро╡роЯро┐роХроЯрпНроЯрпБро╡родрпБ?", "faq_2_a": "роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпНроХро│рпИ **ро╡рпЗро▓рпИ роорпБро▒рпИ**, **роЗроЯроорпН**, **родро┐ро▒ройрпНроХро│рпН**, рооро▒рпНро▒рпБроорпН **роХрпБро▒рпИроирпНродрокроЯрпНроЪ роЙродро╡ро┐родрпНродрпКроХрпИ** роЖроХро┐ропро╡ро▒рпНро▒ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН ро╡роЯро┐роХроЯрпНроЯ роирпАроЩрпНроХро│рпН рокроХрпНроХрокрпНрокроЯрпНроЯро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро▓ро╛роорпН.",
        "faq_3_q": "родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ рокро░ро┐роирпНродрпБро░рпИроХро│рпБроХрпНроХрпБ роОройродрпБ рокропрпЛроЯрпЗроЯрпНроЯро╛ро╡рпИ роиро╛ройрпН рокродро┐ро╡рпЗро▒рпНро▒ роорпБроЯро┐ропрпБрооро╛?", "faq_3_a": "роЖроорпН, роЗрокрпНрокрпЛродрпБ роирпАроЩрпНроХро│рпН роирпЗро░роЯро┐ропро╛роХ рокроХрпНроХрокрпНрокроЯрпНроЯро┐ропро┐ро▓рпН роЙроЩрпНроХро│рпН рокропрпЛроЯрпЗроЯрпНроЯро╛ро╡рпИ (PDF роЕро▓рпНро▓родрпБ TXT) рокродро┐ро╡рпЗро▒рпНро▒ро▓ро╛роорпН. роХрогро┐ройро┐ родро▒рпНрокрпЛродрпБ роХрпИропрпЗроЯрпБ родро┐ро▒ройрпН роЙро│рпНро│рпАроЯрпНроЯрпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ройро╛ро▓рпБроорпН, роОродро┐ро░рпНроХро╛ро▓родрпНродро┐ро▓рпН родро╛ройро┐ропроЩрпНроХрпБ CV рокроХрпБрокрпНрокро╛ропрпНро╡рпБроЯройрпН роТро░рпБроЩрпНроХро┐рогрпИроХрпНроХ роЗроирпНрод рокродро┐ро╡рпЗро▒рпНро▒ роЕроорпНроЪроорпН роЙро│рпНро│родрпБ.",
        "faq_4_q": "'роЖройрпНро▓рпИройрпН' рооро▒рпНро▒рпБроорпН 'роЖроГрокрпНро▓рпИройрпН' ро╡рпЗро▓рпИ роорпБро▒рпИроХро│рпБроХрпНроХрпБ роОройрпНрой ро╡ро┐родрпНродро┐ропро╛роЪроорпН?", "faq_4_a": "**'роЖройрпНро▓рпИройрпН'** роОройрпНрокродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБрокрпНрокродрпБ, **'ро░ро┐роорпЛроЯрпН'** роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпНроХро│рпИ роЙроЩрпНроХро│рпБроХрпНроХрпБроХрпН роХро╛рогрпНрокро┐роХрпНроХрпБроорпН. **'роЖроГрокрпНро▓рпИройрпН'** роОройрпНрокродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБрокрпНрокродрпБ, **'роЖройрпН-роЪрпИроЯрпН'** роЕро▓рпНро▓родрпБ **'ро╣рпИрокрпНро░ро┐роЯрпН'** роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпНроХро│рпИ роЙроЩрпНроХро│рпБроХрпНроХрпБроХрпН роХро╛рогрпНрокро┐роХрпНроХрпБроорпН.",
        "faq_5_q": "роЙродро╡ро┐родрпНродрпКроХрпИ роОро╡рпНро╡ро╛ро▒рпБ роХрогроХрпНроХро┐роЯрокрпНрокроЯрпБроХро┐ро▒родрпБ?", "faq_5_a": "роТро╡рпНро╡рпКро░рпБ роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпНрокро┐ро▒рпНроХрпБроорпН роХро╛роЯрпНроЯрокрпНрокроЯрпБроорпН роЙродро╡ро┐родрпНродрпКроХрпИ, родро░ро╡рпБродрпНродрпКроХрпБрокрпНрокро┐ро▓рпН роХрпБро▒ро┐рокрпНрокро┐роЯрокрпНрокроЯрпНроЯ роТро░рпБ роиро┐ро▓рпИропро╛рой родрпКроХрпИропро╛роХрпБроорпН. **'роХрпБро▒рпИроирпНродрокроЯрпНроЪ роЙродро╡ро┐родрпНродрпКроХрпИ'** ро╕рпНро▓рпИроЯро░рпН, роирпАроЩрпНроХро│рпН родрпЗро░рпНроирпНродрпЖроЯрпБродрпНрод родрпКроХрпИроХрпНроХрпБ роЪроорооро╛рой роЕро▓рпНро▓родрпБ роЕродро▒рпНроХрпБ роЕродро┐роХрооро╛роХ роЙро│рпНро│ роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпНроХро│рпИ роороЯрпНроЯрпБроорпЗ ро╡роЯро┐роХроЯрпНроЯрпБроХро┐ро▒родрпБред",
        "footer": "InternMate - Girkar Namira Siddique роЕро╡ро░рпНроХро│ро╛ро▓рпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ"
    }
}

# --- Callback Function for Language Change ---
def update_language():
    """Updates the session state language and forces a rerun."""
    # The new language name is stored in the key 'language_select_key'
    selected_name = st.session_state['language_select_key']
    language_options_map = {'English': 'en', 'рд╣рд┐рдВрджреА': 'hi', 'рдорд░рд╛рдареА': 'mr', 'родрооро┐ро┤рпН': 'ta'}
    st.session_state.lang = language_options_map.get(selected_name, 'en')
    # Use st.rerun instead of st.experimental_rerun for modern Streamlit versions
    st.rerun()

# --- Data Loading ---
@st.cache_data
def load_internships():
    # Standardize location names for filtering
    data = {
        'company': [
            'Tech Innovators Inc.', 'Data Wizards Ltd.', 'Creative Solutions Co.',
            'Global Marketing Agency', 'AI Driven Insights', 'Quantum Tech',
            'Financial Futures', 'Health Tech Solutions', 'Sustainable Energy Co.',
            'GameDev Studio', 'Product Pulse Co.', 'PM Solutions Hub',
            'E-Commerce Giants', 'FinTech Forward'
        ],
        'role': [
            'Software Engineer Intern', 'Data Analyst Intern', 'UI/UX Design Intern',
            'Digital Marketing Intern', 'Machine Learning Intern', 'Cloud Computing Intern',
            'Financial Analyst Intern', 'Healthcare Data Intern', 'Environmental Analyst Intern',
            'Game Developer Intern', 'Product Management Intern', 'PM Intern',
            'Frontend Developer Intern', 'Risk Analyst Intern'
        ],
        'location': [
            'Remote', 'Mumbai (On-site)', 'Delhi (Hybrid)', 'Remote',
            'Bangalore (On-site)', 'Remote', 'Chennai (Hybrid)',
            'Pune (On-site)', 'Remote', 'Hyderabad (Hybrid)', 'Mumbai (On-site)', 'Delhi (On-site)',
            'Remote', 'Mumbai (Hybrid)'
        ],
        'stipend': [
            'тВ╣15,000', 'тВ╣20,000', 'тВ╣12,000', 'тВ╣10,000',
            'тВ╣25,000', 'тВ╣18,000', 'тВ╣16,000', 'тВ╣22,000',
            'тВ╣14,000', 'тВ╣17,000', 'тВ╣21,000', 'тВ╣20,000',
            'тВ╣18,000', 'тВ╣23,000'
        ],
        'description': [
            'Developing web applications using Python and React.',
            'Analyzing large datasets and creating data visualizations.',
            'Designing user interfaces and creating wireframes for mobile apps.',
            'Managing social media campaigns and creating content.',
            'Building and training machine learning models.',
            'Working on cloud infrastructure and deployment pipelines.',
            'Assisting with financial modeling and market analysis.',
            'Processing and analyzing patient data for insights.',
            'Researching and analyzing data for renewable energy projects.',
            'Developing game mechanics and level design using Unity.',
            'Assisting with product roadmaps, market research, and feature ideation.',
            'A hands-on role in a PM team, assisting with product strategy and launch.',
            'Building responsive user interfaces with React and Tailwind CSS.',
            'Analyzing financial risks and building predictive models.'
        ],
        'skills': [
            'Python, React, JavaScript, Git', 'Python, Pandas, SQL, Visualization',
            'Figma, Sketch, UI/UX, Prototyping', 'SEO, SEM, Social Media, Content Creation',
            'Python, TensorFlow, Scikit-learn, NLP', 'AWS, Azure, Docker, Kubernetes',
            'Excel, Financial Modeling, Data Analysis', 'SQL, Python, Data Cleaning, Statistics',
            'Python, GIS, R, Data Analysis', 'Unity, C#, Game Design, 3D Modeling',
            'Product Management, Market Research, Agile, JIRA', 'Product Strategy, Agile, Scrum, Market Analysis',
            'React, JavaScript, HTML, CSS, Tailwind', 'Python, R, Risk Analysis, Statistics'
        ],
        'image_url': [
            'https://placehold.co/400x150/007bff/ffffff?text=Software', 
            'https://placehold.co/400x150/4CAF50/ffffff?text=Data',
            'https://placehold.co/400x150/FFC107/ffffff?text=Design',
            'https://placehold.co/400x150/FF5722/ffffff?text=Marketing',
            'https://placehold.co/400x150/9C27B0/ffffff?text=ML/AI',
            'https://placehold.co/400x150/00BCD4/ffffff?text=Cloud',
            'https://placehold.co/400x150/F44336/ffffff?text=Finance',
            'https://placehold.co/400x150/795548/ffffff?text=Health',
            'https://placehold.co/400x150/607D8B/ffffff?text=Energy',
            'https://placehold.co/400x150/E91E63/ffffff?text=Gaming',
            'https://placehold.co/400x150/3F51B5/ffffff?text=Product',
            'https://placehold.co/400x150/03A9F4/ffffff?text=PM',
            'https://placehold.co/400x150/8BC34A/ffffff?text=Frontend',
            'https://placehold.co/400x150/673AB7/ffffff?text=Risk'
        ]
    }
    return pd.DataFrame(data)

df = load_internships()

# --- Session State for Language & Initial Config ---
if 'lang' not in st.session_state:
    st.session_state.lang = 'en'

# Must be called first to ensure UI updates correctly
st.set_page_config(
    page_title=text_strings[st.session_state.lang]["page_title"],
    page_icon="ЁЯТ╝",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Styling ---
st.markdown("""
<style>
/* Base App Styling */
.stApp { background-color: #f0f2f6; font-family: 'Inter', sans-serif; }

/* Header Styling */
.header { 
    background: linear-gradient(135deg, #e0f7fa, #ffffff);
    padding: 30px; 
    border-radius: 12px; 
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1); 
    text-align: center;
    margin-bottom: 20px;
}
.header h1 { 
    color: #007bff; 
    font-size: 3rem; 
    font-weight: 800; 
    letter-spacing: 1px;
}
.header p { 
    color: #555555; 
    margin-top: 10px;
    font-size: 1.1rem;
}

/* Sidebar button style for aesthetics */
div[data-testid="stSidebar"] button {
    background-color: #4CAF50;
    color: white;
    border-radius: 8px;
    padding: 10px 15px;
    font-weight: bold;
    margin-top: 15px;
    transition: background-color 0.3s;
}
div[data-testid="stSidebar"] button:hover {
    background-color: #45a049;
}

/* Card Grid Layout */
.card-grid { 
    display: grid; 
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); /* Slightly wider cards */
    gap: 20px; 
    margin-top: 20px;
}
.internship-card { 
    background-color: #ffffff; 
    padding: 0; /* Remove padding from main card to fit image */
    overflow: hidden;
    border-radius: 12px; 
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); 
    transition: transform 0.3s, box-shadow 0.3s; 
    /* Dynamic border-left color set in Python */
    border-left: 5px solid #007bff; 
}
.internship-card:hover { 
    transform: translateY(-5px); 
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
}

.card-image-container {
    height: 150px;
    overflow: hidden;
}
.card-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.card-content {
    padding: 15px;
}
.card-header { 
    display: flex; 
    justify-content: space-between; 
    align-items: flex-start; 
    margin-bottom: 10px; 
}
.card-title { 
    font-size: 1.4rem; 
    font-weight: 700; 
    color: #333333; 
    flex-grow: 1;
}
.card-location { 
    font-size: 0.9rem; 
    color: #007bff; 
    background-color: #e6f3ff;
    padding: 4px 8px;
    border-radius: 6px;
    font-weight: 500;
}
.card-stipend { 
    font-size: 1.1rem; 
    color: #388e3c; /* Dark Green */
    font-weight: bold; 
    margin-top: 5px; 
}
.card-description { 
    font-size: 0.95rem; 
    color: #666666; 
    margin-top: 10px;
    line-height: 1.4;
}
.card-skills { 
    display: flex; 
    flex-wrap: wrap; 
    gap: 8px; 
    margin-top: 15px;
}
.skill-tag { 
    background-color: #f0f0f0; 
    color: #777777; 
    padding: 6px 12px; 
    border-radius: 20px; 
    font-size: 0.8rem;
    font-weight: 500;
}

/* Utility/Footer */
.empty-results { text-align: center; color: #999999; margin-top: 50px; font-size: 1.2rem; }
footer { text-align: center; margin-top: 50px; padding: 10px; font-size: 0.85rem; color: #aaaaaa; border-top: 1px solid #e0e0e0; }
.help-section { margin-top: 30px; }
.help-section h3 { color: #333333; font-size: 1.8rem; font-weight: bold; margin-bottom: 20px; border-bottom: 2px solid #007bff; padding-bottom: 5px;}
</style>
""", unsafe_allow_html=True)

# --- Sidebar Controls (Must be run before Main Content) ---
st.sidebar.title(text_strings[st.session_state.lang]['sidebar_title'])
st.sidebar.markdown(text_strings[st.session_state.lang]['sidebar_tagline'])

# 1. Language selection (Updates st.session_state.lang using callback)
language_options = {'English': 'en', 'рд╣рд┐рдВрджреА': 'hi', 'рдорд░рд╛рдареА': 'mr', 'родрооро┐ро┤рпН': 'ta'}
current_index = list(language_options.keys()).index(
    list(language_options.keys())[list(language_options.values()).index(st.session_state.lang)]
)

st.sidebar.selectbox(
    text_strings[st.session_state.lang]['select_language'], 
    options=list(language_options.keys()), 
    index=current_index,
    key='language_select_key', # Key used to store the selection
    on_change=update_language # Callback function to handle update and rerun
)

# 2. Location Filter
all_locations = sorted(list(set([loc.split('(')[0].strip() for loc in df['location'] if loc != 'Remote'])))
location_options = [text_strings[st.session_state.lang]['any']] + all_locations
selected_location = st.sidebar.selectbox(text_strings[st.session_state.lang]['select_location'], options=location_options)

# 3. Work Mode selection
work_mode_options = {
    text_strings[st.session_state.lang]['online']: 'Online',
    text_strings[st.session_state.lang]['offline']: 'Offline',
    text_strings[st.session_state.lang]['any']: 'Any'
}
selected_work_mode_name = st.sidebar.selectbox(text_strings[st.session_state.lang]['work_mode'], options=list(work_mode_options.keys()))
work_mode = work_mode_options[selected_work_mode_name]

# 4. CV Upload is now available (Added the file uploader)
st.sidebar.markdown("---")
st.sidebar.markdown(f"**ЁЯУД {text_strings[st.session_state.lang]['upload_cv']}**")
uploaded_file = st.sidebar.file_uploader("", type=["pdf", "txt"], accept_multiple_files=False, key="cv_uploader")

# 5. Search Query & Stipend
st.sidebar.markdown("---")
search_query = st.sidebar.text_input(text_strings[st.session_state.lang]['enter_skills'])
st.sidebar.write(text_strings[st.session_state.lang]['min_stipend'])
min_stipend = st.sidebar.slider("", 0, 50000, 0, step=1000)

# --- Main App Content ---
st.markdown(f"<div class='header'><h1>{text_strings[st.session_state.lang]['header_title']}</h1><p>{text_strings[st.session_state.lang]['header_tagline']}</p></div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write("---")

# --- Recommendation Button Logic ---
if st.sidebar.button(text_strings[st.session_state.lang]['show_recommendations']) or 'initial_run' not in st.session_state:
    st.session_state.initial_run = True

    # --- Filtering logic ---
    filtered_df = df.copy()

    # Filter by Work Mode
    if work_mode == 'Online':
        filtered_df = filtered_df[filtered_df['location'].str.contains('Remote', case=False, na=False)]
    elif work_mode == 'Offline':
        # Exclude 'Remote' locations for Offline mode
        filtered_df = filtered_df[~filtered_df['location'].str.contains('Remote', case=False, na=False)]

    # Filter by Specific Location
    if selected_location != text_strings[st.session_state.lang]['any']:
        filtered_df = filtered_df[filtered_df['location'].str.contains(selected_location, case=False, na=False)]
    
    # Filter by stipend
    filtered_df['stipend_numeric'] = filtered_df['stipend'].str.replace('тВ╣', '').str.replace(',', '').astype(int)
    filtered_df = filtered_df[filtered_df['stipend_numeric'] >= min_stipend]

    # --- Recommendation logic ---
    if search_query and not filtered_df.empty:
        # Combine skills and description for better matching
        filtered_df['combined_text'] = filtered_df['skills'] + " " + filtered_df['description']

        # TF-IDF Vectorizer
        vectorizer = TfidfVectorizer().fit(filtered_df['combined_text'])
        internship_vectors = vectorizer.transform(filtered_df['combined_text'])

        # Create a vector for the user's query
        query_vector = vectorizer.transform([search_query])

        # Calculate cosine similarity
        cosine_similarities = cosine_similarity(query_vector, internship_vectors).flatten()

        # Get top recommendations
        filtered_df['similarity_score'] = cosine_similarities
        filtered_df = filtered_df.sort_values(by='similarity_score', ascending=False)
        # Only show results with a match score > 0
        filtered_df = filtered_df[filtered_df['similarity_score'] > 0] 
    elif search_query and filtered_df.empty:
        st.info("Please broaden your filters to enable skill-based matching.")
    elif not search_query:
        # If no search query, just display all filtered results sorted by stipend
        filtered_df = filtered_df.sort_values(by='stipend_numeric', ascending=False)
        
    # --- Display results ---
    st.write(f"### {text_strings[st.session_state.lang]['recommendations_title']}")

    if not filtered_df.empty:
        st.markdown("<div class='card-grid'>", unsafe_allow_html=True)
        for index, row in filtered_df.iterrows():
            # Logic for dynamic card border color based on match score
            border_color = "#D3D3D3" # Default low match
            if search_query:
                score = row.get('similarity_score', 0)
                if score > 0.5:
                    border_color = "#4CAF50" # Green for high match
                elif score > 0.2:
                    border_color = "#FFA500" # Orange for medium match
                else:
                    border_color = "#007bff" # Blue if no match but matches filter

            st.markdown(f"""
            <div class='internship-card' style='border-left: 5px solid {border_color};'>
                <div class='card-image-container'>
                    <img class='card-image' src="{row['image_url']}" alt="{row['role']} Image">
                </div>
                <div class='card-content'>
                    <div class='card-header'>
                        <div class='card-title'>{row['role']}</div>
                        <div class='card-location'>ЁЯУН {row['location'].split('(')[0].strip()}</div>
                    </div>
                    <div class='card-stipend'>ЁЯТ╡ {text_strings[st.session_state.lang]['stipend_label']}: {row['stipend']}</div>
                    <div class='card-description'>{row['description']}</div>
                    <div class='card-skills'>
                        {"".join([f"<span class='skill-tag'>ЁЯТб {skill.strip()}</span>" for skill in row['skills'].split(',')])}
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div class='empty-results'>{text_strings[st.session_state.lang]['no_results']}</div>", unsafe_allow_html=True)

st.write("---")

# --- Help and Support Center ---
st.markdown(f"""
<div class='help-section'>
    <h3>{text_strings[st.session_state.lang]['help_title']}</h3>
</div>
""", unsafe_allow_html=True)

# Using current language strings for expander titles
with st.expander(text_strings[st.session_state.lang]['faq_1_q']):
    st.write(text_strings[st.session_state.lang]['faq_1_a'])

with st.expander(text_strings[st.session_state.lang]['faq_2_q']):
    st.write(text_strings[st.session_state.lang]['faq_2_a'])

with st.expander(text_strings[st.session_state.lang]['faq_3_q']):
    st.write(text_strings[st.session_state.lang]['faq_3_a'])

with st.expander(text_strings[st.session_state.lang]['faq_4_q']):
    st.write(text_strings[st.session_state.lang]['faq_4_a'])

with st.expander(text_strings[st.session_state.lang]['faq_5_q']):
    st.write(text_strings[st.session_state.lang]['faq_5_a'])

st.markdown("<br><br><br>", unsafe_allow_html=True)
st.markdown(f"<footer>{text_strings[st.session_state.lang]['footer']}</footer>", unsafe_allow_html=True)
